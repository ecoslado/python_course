# La forma mas simple de usar urllib2

import urllib2
response = urllib2.urlopen('http://www.abc.es')
html = response.read()

>>>  <!doctype html>\n<!--[if lt IE 7]>   <html class="no-js ie6 lt-ie7 ...


# urllib2 maneja el concepto de peticion (request)
# con el objeto Request se tiene el control sobre la peticion que se esta construyendo
req = urllib2.Request('http://www.abc.es')
response = urllib2.urlopen(req)
the_page = response.read()

# Tambien podemos acceder a un ftp
req = urllib2.Request('ftp://example.com/')


# GET (urlencode con urllib, no urllib2)
import urllib2
import urllib

data = {}
data['name'] = 'Somebody Here'
data['location'] = 'Northampton'
data['language'] = 'Python'
data = urllib.urlencode(data)
print data  # The order may differ. 
>>> name=Somebody+Here&language=Python&location=Northampton

url = 'http://www.example.com/example.cgi'
full_url = url + '?' + data
response = urllib2.urlopen(full_url)
the_page = response.read()


# POST
import urllib
import urllib2

data = {}
data['name'] = 'Somebody Here'
data['location'] = 'Northampton'
data['language'] = 'Python'
data = urllib.urlencode(data)

url = 'http://www.someserver.com/cgi-bin/register.cgi'
req = urllib2.Request(url, data)
response = urllib2.urlopen(req)
the_page = response.read()


# HEADERS
import urllib
import urllib2

data = {}
data['name'] = 'Somebody Here'
data['location'] = 'Northampton'
data['language'] = 'Python'
data = urllib.urlencode(data)

user_agent = 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'
headers = { 'User-Agent' : user_agent }

url = 'http://www.someserver.com/cgi-bin/register.cgi'
req = urllib2.Request(url, data, headers)
response = urllib2.urlopen(req)
the_page = response.read()



# EXCEPCIONES

# URLError Errores en la comunicacion
# 	Tienen atributo e.reason

# HTTPError Errores en el servidor
#	Tienen atributo e.code que indica el codigo de error

from urllib2 import Request, urlopen, URLError, HTTPError
req = Request(someurl)
try:
    response = urlopen(req)
except HTTPError as e:
    print 'The server couldn\'t fulfill the request.'
    print 'Error code: ', e.code
except URLError as e:
    print 'We failed to reach a server.'
    print 'Reason: ', e.reason
else:
    # everything is fine

# Note
#
# The except HTTPError must come first, otherwise except URLError will also catch an HTTPError.



# Hay quien prefiere recoger URLError (la mas generica), y realizar:
from urllib2 import Request, urlopen, URLError
req = Request(someurl)
try:
    response = urlopen(req)
except URLError as e:
    if hasattr(e, 'reason'):
        print 'We failed to reach a server.'
        print 'Reason: ', e.reason
    elif hasattr(e, 'code'):
        print 'The server couldn\'t fulfill the request.'
        print 'Error code: ', e.code
else:
    # everything is fine


# TIMEOUTS
import socket
import urllib2

# timeout in seconds
timeout = 10
socket.setdefaulttimeout(timeout)