# Generador de numeros
def firstn(n):
    num, nums = 0, list()
    while num < n:
        nums.append(num)
        num += 1
    return nums

print firstn(100)
print sum(firstn(100))

>> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
>> 4950

# Generador de numeros como un iterable
class firstn_as_class(object):
    def __init__(self, n):
        self.n = n
        self.num = 0
    
    def __iter__(self):
        return self
    
    # Python 3 compatibility
    def __next__(self):
        return self.next()
    
    def next(self):
        if self.num < self.n:
            cur, self.num = self.num, self.num + 1
            return cur
        else:
            raise StopIteration()

print firstn_as_class(100)
print sum(firstn_as_class(100))

>> <__main__.firstn_as_class object at 0x7f1d04990290>
>> 4950

# Generador de numeros como un generador
def firstn_as_generator(n):
    num = 0
    while num < n:
        yield num
        num += 1
print firstn_as_generator(100)
print sum(firstn_as_generator(100))

>> <generator object firstn_as_generator at 0x7f1d0497ca50>
>> 4950

# Generador de numeros como un 'generator comprehension'
firstn_generator_comprehension = (i for i in xrange(100))
print firstn_generator_comprehension
print sum(firstn_generator_comprehension)

>> <generator object <genexpr> at 0x7f1d0497ca50>
>> 4950